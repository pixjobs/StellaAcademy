# ---- Versions ----
ARG NODE_VERSION=20-alpine

# ==================================
# Stage 1: Builder
# Compiles TypeScript to JavaScript
# ==================================
FROM node:20-alpine AS builder
WORKDIR /app

# Copy manifests and configs
COPY package.json package-lock.json* ./
COPY tsconfig.json tsconfig.worker.json ./

# Install all dependencies needed for the build
RUN npm ci

# Copy the rest of the source code
COPY src ./src

# --- CHANGED: Full Compilation Step ---
# Instead of just type-checking, we now run the actual build script.
# This compiles everything into the /app/dist folder and handles path aliases.
# The build will fail if there are any TypeScript errors, so validation is included.
RUN npm run build:worker

# =========================
# Stage 2: Final Runtime
# Creates a lean image with only what's needed to run.
# =========================
FROM node:${NODE_VERSION}
WORKDIR /app

# Install curl for the health check.
RUN apk add --no-cache curl

# Copy only production dependency manifests from the builder stage.
COPY --from=builder /app/package.json /app/package-lock.json* ./

# Install ONLY production dependencies.
RUN npm ci --omit=dev

# --- CHANGED: Copy Compiled Code ---
# Instead of copying the 'src' folder, we copy the compiled JavaScript
# from the 'dist' folder in the builder stage. This makes the final image
# smaller and more secure as it doesn't contain source code.
COPY --from=builder /app/dist ./dist

# Environment for Cloud Run.
ENV NODE_ENV=production \
    PORT=8080

# Cloud Run health check configuration.
EXPOSE 8080

# --- CHANGED: Updated Health Check Path ---
# The new server.ts uses '/_health' for its health check endpoint.
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
  CMD curl -f "http://127.0.0.1:${PORT}/_health" || exit 1

# --- CHANGED: Final Production Command ---
# This command now uses the 'start:worker' script from your package.json.
# It directly runs the compiled JavaScript file with Node.js, which is
# faster and more efficient than using tsx in production.
CMD ["npm", "run", "start:worker"]