# ---- Versions ----
ARG NODE_VERSION=20-alpine

# ==================================
# Stage 1: Builder (compile TS -> JS)
# ==================================
FROM node:${NODE_VERSION} AS builder
WORKDIR /app

# Copy manifests and tsconfigs first for better layer caching
COPY package.json package-lock.json* ./
COPY tsconfig.json tsconfig.worker.json ./

# Install ALL deps (prod + dev) for build
RUN npm ci

# Copy source
COPY src ./src

# Build ONLY the worker bundle
# If your build script already targets tsconfig.worker.json, keep it.
# Otherwise, use:  tsc -p tsconfig.worker.json
RUN rm -rf dist && npm run build:worker

# Sanity check: fail early if the entry file isn't created
# Adjust this path if your compiled output differs.
RUN test -f dist/workers/ollama/server.js || (echo >&2 "‚ùå Expected entry dist/workers/ollama/server.js not found. Contents of dist:" && ls -R dist && exit 1)

# =========================
# Stage 2: Runtime
# =========================
FROM node:${NODE_VERSION} AS runtime
WORKDIR /app

# Small tools for HEALTHCHECK (optional but handy)
RUN apk add --no-cache curl

# Copy only the minimal runtime bits
COPY --from=builder /app/package.json /app/package-lock.json* ./
# Install ONLY production deps
RUN npm ci --omit=dev --no-audit --no-fund

# Copy compiled JS (and only what you need)
COPY --from=builder /app/dist ./dist

# Cloud Run env
ENV NODE_ENV=production \
    PORT=8080

EXPOSE 8080

# Healthcheck (make sure your server exposes GET /_health)
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
  CMD curl -fsS "http://127.0.0.1:${PORT}/_health" || exit 1

# Run the compiled worker directly (avoid npm script path drift)
# IMPORTANT: ensure this matches the file we checked above.
CMD ["node", "dist/workers/ollama/server.js"]
